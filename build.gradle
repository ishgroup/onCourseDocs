import org.apache.tools.ant.filters.ReplaceTokens
import java.time.LocalDate
import java.time.format.DateTimeFormatter

plugins {
    id 'com.github.ben-manes.versions' version '0.39.0' // adds the task 'dependencyUpdates'
    id 'com.dorongold.task-tree' version '2.1.0' // adds the task 'taskTree [some task]'
    id 'distribution'
    id 'maven-publish'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'distribution'
    apply plugin: 'maven-publish'
    apply plugin: 'org.asciidoctor.jvm.convert'

    group = 'ish.oncourse.docs'
    version = 'SNAPSHOT' // this project doesn't have versioned releases

    // bug https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/559
    repositories {
        mavenCentral()
    }

    asciidoctor {
        logDocuments true
        baseDir "src"
        sourceDir baseDir
        sources {
            include 'index.adoc'
        }
        outputDir "${buildDir}/dist"
        options doctype: 'book'
        attributes  'source-highlighter': 'coderay',
                    'linkcss': '',
                    'toc': 'left',
                    'toc-title': "",
                    'sectnums': 'all',
                    'sectnumlevels': 2,
                    'partnums': true,
                    'icons': 'font',
                    'docinfo': 'shared',
                    'docinfodir': "${rootDir}/src",
                    'stylesheet': 'css/oncourse.css',
                    'revnumber': null,
                    'revdate': LocalDate.now().format(DateTimeFormatter.ofPattern("d MMM yyyy")),

                    'plantuml-config':"${rootDir}/src/plantuml.config"

        resources {
            from(sourceDir) {
                include 'images/**'
            }
            from("${rootDir}/src") {
                include "css/oncourse.css"
                include "js/**"
                include 'images/**'
            }
        }
        asciidoctorj {
            modules {
                diagram.use()
            }
        }
        doLast {
            ant.replaceregexp(match: 'img src', replace: 'img src="images/placeholder.png" class="lazy" data-src', flags: 'g') {
                fileset(dir: "${buildDir}/dist", includes: '*.html')
            }
        }
    }

    distributions {
        main {
            contents {
                from asciidoctor
            }
        }
    }

    distZip {
        archiveVersion = ''
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifact distZip
                pom {
                    description = "ish onCourse documentation"
                    licenses {
                        license {
                            name = "Creative Commons Attribution 4.0 International License"
                            url = "https://github.com/ishgroup/onCourseDocs/blob/master/LICENSE.txt"
                        }
                    }
                    scm {
                        url = "https://github.com/ishgroup/onCourseDocs"
                    }
                }
            }
        }
        repositories {
            maven {
                name "snapshots"
                url "https://repo.ish.com.au/content/repositories/ish-snapshots"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }

    // this task should be periodically run manually to optimise files in the source folders
    task optimise {
        description = "Optimise all the images"

        // both ImageMagick and optipng need to be installed
        doLast {
            fileTree("src").matching{ include '**/*.png' }.each{ f ->
                BigDecimal resolution=0, width=0
                new ByteArrayOutputStream().withStream { output ->
                    exec {
                        commandLine = 'magick'
                        standardOutput = output
                        args = ['identify', '-format', '%x', f.absolutePath]
                    }
                    resolution = output.toString() as BigDecimal
                }
                new ByteArrayOutputStream().withStream { output ->
                    exec {
                        commandLine = 'magick'
                        standardOutput = output
                        args = ['identify', '-format', '%w', f.absolutePath]
                    }
                    width = output.toString() as BigDecimal
                }

                if (resolution != 72 || width > 900) {
                    logger.warn('Found image {} which has resolution {} and width {}. Rescaling now.', f.absolutePath, resolution, width)
                    exec {
                        commandLine = 'convert'
                        args = [f.absolutePath, '-strip', '-units' ,'PixelsPerInch', '-density', '72', '-resize', '900>', f.absolutePath]
                    }
                }
                exec {
                    commandLine = 'optipng'
                    args = ['-fix', '-strip all', f.absolutePath]
                }
            }
        }
    }
}

// Skip beta and other non-final releases in the update report
dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'ea'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
