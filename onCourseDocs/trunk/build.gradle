import com.icl.saxon.TransformerFactoryImpl
import org.apache.fop.apps.FOUserAgent
import org.apache.fop.apps.Fop
import org.apache.fop.apps.FopFactory
import org.apache.fop.apps.MimeConstants
import org.xml.sax.InputSource
import org.xml.sax.XMLReader

import javax.xml.parsers.SAXParserFactory
import javax.xml.transform.Result
import javax.xml.transform.Source
import javax.xml.transform.Transformer
import javax.xml.transform.TransformerFactory
import javax.xml.transform.sax.SAXResult
import javax.xml.transform.sax.SAXSource
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.stream.StreamSource
import java.util.Date;
import java.text.SimpleDateFormat;
import org.apache.tools.ant.filters.*

import com.xlson.groovycsv.CsvParser

buildscript {
	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
	}
	dependencies {
		def fopDeps = ['org.apache.xmlgraphics:fop:1.1@jar',
				'org.apache.xmlgraphics:xmlgraphics-commons:1.5',
				'org.apache.xmlgraphics:batik-bridge:1.7@jar',
				'org.apache.xmlgraphics:batik-css:1.7@jar',
				'org.apache.xmlgraphics:batik-dom:1.7',
                'org.apache.xmlgraphics:batik-svggen:1.7',
                'org.apache.xmlgraphics:batik-svg-dom:1.7@jar',
                'org.apache.avalon.framework:avalon-framework-impl:4.3.1']

		classpath 'saxon:saxon:6.5.3',
				'xerces:xercesImpl:2.11.0',
				'apache-xerces:resolver:2.9.1',
				fopDeps,
				'net.sf.xslthl:xslthl:2.1.0',
                'com.github.ben-manes:gradle-versions-plugin:0.5-beta-1',
                'com.xlson.groovycsv:groovycsv:1.0'
	}

}

allprojects {
    apply plugin: 'base'
    apply plugin: 'versions' // adds the task 'dependencyUpdates'
    
    version = project.hasProperty('docVersion') ? project.docVersion : 'unspecified'

    configurations {
        docbookxslt
    }

    dependencies {
        repositories {
            maven {
                url 'http://repo.ish.com.au/content/groups/public'
            }
        }
        docbookxslt 'net.sf.docbook:docbook-xsl:1.78.1:resources@zip'
    }

    task explodeXSL(type: Copy) {
        from zipTree(configurations.docbookxslt.singleFile)
        into "${buildDir}/xslt"
    }

    task processResources(type: Copy) {
        into "${buildDir}"
        from "src"
        filter(ReplaceTokens,tokens: [
            version: version, 
            publishedDate: new SimpleDateFormat("dd MMM yyyy").format(new Date()),
            copyrightYear : new SimpleDateFormat("yyyy").format(new Date())])
    }
}

subprojects {
    task docbookHtml(type: Docbook, dependsOn: [processResources, parent.tasks['explodeXSL']]) {
		description = 'Generates chunked docbook html output.'
        outputFile = file("${buildDir}/html/index.html")
		stylesheet = file("${rootDir}/stylesheets/html.xsl")
        sourceDirectory = file( "${buildDir}" )

        doLast {
            copy {
                into "${buildDir}/html/images"
                from "src/images"
            }
            copy {
                into "${buildDir}/html/css"
                from "${rootDir}/css"
            }
            copy {
                into "${buildDir}/html/js"
                from "${rootDir}/js"
            }
        }
	}

    task docbookPdfPrepare(type: Docbook, dependsOn: [processResources, parent.tasks['explodeXSL']]) {
        description = 'Generates PDF fo output.'
        outputFile = file("${buildDir}/pdf/index.fo")
        stylesheet = file("${rootDir}/stylesheets/pdf.xsl")
        sourceDirectory = file( "${buildDir}" )
    }

	task docbookPdf(type: DocbookPdf, dependsOn: 'docbookPdfPrepare') {
		description = 'Generates PDF final output.'
        sourceFile = file("${buildDir}/pdf/index.fo")
        outputFile = file("${buildDir}/pdf/${project.name}.pdf")
	}

	task docbook(dependsOn: [docbookHtml, docbookPdf]) {
		group = 'Documentation'
		description = 'Generates all HTML and PDF documentation.'
	}

}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

public class Docbook extends DefaultTask {
	@InputDirectory
	File sourceDirectory = new File(project.getProjectDir(), "src");

	@InputFile
	File stylesheet;

	@OutputFile
	File outputFile

	@TaskAction
	public final void transform() {
		// the docbook tasks issue spurious content to the console. redirect to INFO level
		// so it doesn't show up in the default log level of LIFECYCLE unless the user has
		// run gradle with '-d' or '-i' switches -- in that case show them everything
		switch (project.gradle.startParameter.logLevel) {
			case LogLevel.DEBUG:
			case LogLevel.INFO:
				break;
			default:
				logging.captureStandardOutput(LogLevel.INFO)
				logging.captureStandardError(LogLevel.INFO)
		}

		SAXParserFactory factory = new org.apache.xerces.jaxp.SAXParserFactoryImpl();
		factory.setXIncludeAware(true);
        XMLReader reader = factory.newSAXParser().getXMLReader();
        TransformerFactory transformerFactory = new TransformerFactoryImpl();

		File srcFile = new File(sourceDirectory, "index.xml");
        InputSource inputSource = new InputSource(srcFile.getAbsolutePath());

        outputFile.getParentFile().mkdirs();
		Result result = new StreamResult(outputFile.getAbsolutePath());

		URL url = stylesheet.toURL();
		Source source = new StreamSource(url.openStream(), url.toExternalForm());
		Transformer transformer = transformerFactory.newTransformer(source);

        String rootFilename = outputFile.getName();
        rootFilename = rootFilename.substring(0, rootFilename.lastIndexOf('.'));
        transformer.setParameter("root.filename", rootFilename);
        transformer.setParameter("base.dir", outputFile.getParent() + File.separator);
        transformer.setParameter('highlight.xslthl.config', 'file://' + project.getRootDir().getAbsolutePath() + '/stylesheets/xslthl-config.xml' );

        transformer.transform(new SAXSource(reader, inputSource), result);
	}
}

public class DocbookPdf extends DefaultTask {

    @InputFile
    File sourceFile;

    @OutputFile
    File outputFile;

    @TaskAction
    public final void transform() {
        FopFactory fopFactory = FopFactory.newInstance();
        fopFactory.setBaseURL(project.getProjectDir().getAbsolutePath() + '/src');
        fopFactory.setUserConfig('file://' + project.getRootDir().getAbsolutePath() + '/fonts/fop-conf.xml');

        fopFactory.setStrictValidation(false);
		OutputStream out = new BufferedOutputStream(new FileOutputStream(outputFile));

		try {
			Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, out);

			TransformerFactory factory = TransformerFactory.newInstance();
			Transformer transformer = factory.newTransformer();
            transformer.setParameter('highlight.xslthl.config', 'file://' + project.getRootDir().getAbsolutePath() + '/stylesheets/xslthl-config.xml' );
            FOUserAgent foUserAgent = fopFactory.newFOUserAgent();
            foUserAgent.setBaseURL(fopFactory.getBaseURL());
			Source src = new StreamSource(sourceFile);

			Result res = new SAXResult(fop.getDefaultHandler());

			transformer.transform(src, res);

		} finally {
			out.close();
		}
	}
}
