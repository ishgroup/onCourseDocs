import org.xml.sax.XMLReader
import org.xml.sax.InputSource
import javax.xml.parsers.SAXParserFactory
import javax.xml.transform.*
import javax.xml.transform.sax.SAXSource
import javax.xml.transform.sax.SAXResult
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.stream.StreamSource

import org.apache.fop.apps.*

import com.icl.saxon.TransformerFactoryImpl

buildscript {
	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
	}
	dependencies {
		def fopDeps = ['org.apache.xmlgraphics:fop:0.95-1@jar',
				'org.apache.xmlgraphics:xmlgraphics-commons:1.3',
				'org.apache.xmlgraphics:batik-bridge:1.7@jar',
				'org.apache.xmlgraphics:batik-util:1.7@jar',
				'org.apache.xmlgraphics:batik-css:1.7@jar',
				'org.apache.xmlgraphics:batik-dom:1.7',
				'org.apache.xmlgraphics:batik-svg-dom:1.7@jar',
				'org.apache.avalon.framework:avalon-framework-api:4.3.1']

		classpath 'saxon:saxon:6.5.3',
				'xerces:xercesImpl:2.9.1',
				'apache-xerces:resolver:2.9.1',
				fopDeps,
				'net.sf.xslthl:xslthl:2.0.1'
	}

}

apply plugin: 'base'
version = "trunk-SNAPSHOT"
ext {
    stylesheetDir = "${projectDir}/stylesheets"
}

subprojects {

    configurations {
        docbookxslt
    }

    dependencies {
        repositories {
            maven {
                url 'http://repo.ish.com.au/content/groups/public'
            }
        }
        docbookxslt 'net.sf.docbook:docbook-xsl:1.77.1:resources@zip'
    }

    task explodeXSL(type: Copy) {
        from zipTree(configurations.docbookxslt.singleFile)
        into "${parent.buildDir}/xslt"
    }

    task docbookHtml(type: DocbookHtml, dependsOn: 'explodeXSL') {
		description = 'Generates chunked docbook html output.'
        outputDir = file("${buildDir}/html")
		stylesheet = file("${stylesheetDir}/html.xsl")
		classpath = buildscript.configurations.classpath

        doLast {
            copy {
                into "${buildDir}/html/images"
                from "src/images"
            }
            copy {
                into "${buildDir}/html/css"
                from "${parent.projectDir}/css"
            }
            copy {
                into "${buildDir}/html/js"
                from "${parent.projectDir}/js"
            }
        }
	}

	task docbookPdf(type: DocbookFoPdf, dependsOn: 'explodeXSL') {
		description = 'Generates PDF docbook output.'
		extension = 'fo'
        outputDir = file("${buildDir}/pdf")
		stylesheet = file("${stylesheetDir}/pdf.xsl")
		classpath = buildscript.configurations.classpath
	}

	[docbookHtml, docbookPdf]*.sourceFileName = 'index.xml'

	task docbook(dependsOn: [docbookHtml, docbookPdf]) {
		group = 'Documentation'
		description = 'Generates all HTML and PDF documentation.'
	}
}

public class Docbook extends DefaultTask {
	@Input
	String extension = 'html';

	@InputDirectory
	File sourceDirectory = new File(project.getProjectDir(), "src");

	@Input
	String sourceFileName = "index.xml";

	@InputFile
	File stylesheet;

	@OutputDirectory
	File outputDir = project.getBuildDir()

	@TaskAction
	public final void transform() {
		// the docbook tasks issue spurious content to the console. redirect to INFO level
		// so it doesn't show up in the default log level of LIFECYCLE unless the user has
		// run gradle with '-d' or '-i' switches -- in that case show them everything
		switch (project.gradle.startParameter.logLevel) {
			case LogLevel.DEBUG:
			case LogLevel.INFO:
				break;
			default:
				logging.captureStandardOutput(LogLevel.INFO)
				logging.captureStandardError(LogLevel.INFO)
		}

		SAXParserFactory factory = new org.apache.xerces.jaxp.SAXParserFactoryImpl();
		factory.setXIncludeAware(true);
        outputDir.mkdirs();

		File srcFile = new File(sourceDirectory, sourceFileName);
		String outputFilename = srcFile.getName().substring(0, srcFile.getName().length() - 4) + '.' + extension;

		File outputFile = new File(outputDir, outputFilename);

		Result result = new StreamResult(outputFile.getAbsolutePath());
		InputSource inputSource = new InputSource(srcFile.getAbsolutePath());

		XMLReader reader = factory.newSAXParser().getXMLReader();
		TransformerFactory transformerFactory = new TransformerFactoryImpl();
		URL url = stylesheet.toURL();
		Source source = new StreamSource(url.openStream(), url.toExternalForm());
		Transformer transformer = transformerFactory.newTransformer(source);


		preTransform(transformer, srcFile, outputFile);

		transformer.transform(new SAXSource(reader, inputSource), result);

		postTransform(outputFile);
	}

	protected void preTransform(Transformer transformer, File sourceFile, File outputFile) {
	}

	protected void postTransform(File outputFile) {
	}
}

/**
 */
class DocbookHtml extends Docbook {
	@Override
	protected void preTransform(Transformer transformer, File sourceFile, File outputFile) {
		String rootFilename = outputFile.getName();
		rootFilename = rootFilename.substring(0, rootFilename.lastIndexOf('.'));
		transformer.setParameter("root.filename", rootFilename);
		transformer.setParameter("base.dir", outputFile.getParent() + File.separator);
	}
}

/**
 */
class DocbookFoPdf extends Docbook {
    @Input
    String extension = 'fo';

    /**
	 * <a href="http://xmlgraphics.apache.org/fop/0.95/embedding.html#render">From the FOP usage guide</a>
	 */
	@Override
	protected void postTransform(File foFile) {
		FopFactory fopFactory = FopFactory.newInstance();

		OutputStream out = null;
		final File pdfFile = getPdfOutputFile(foFile);
		logger.debug("Transforming 'fo' file " + foFile + " to PDF: " + pdfFile);

		try {
			out = new BufferedOutputStream(new FileOutputStream(pdfFile));

			Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, out);

			TransformerFactory factory = TransformerFactory.newInstance();
			Transformer transformer = factory.newTransformer();

			Source src = new StreamSource(foFile);

			Result res = new SAXResult(fop.getDefaultHandler());

			switch (project.gradle.startParameter.logLevel) {
				case LogLevel.DEBUG:
				case LogLevel.INFO:
					break;
				default:
					// only show verbose fop output if the user has specified 'gradle -d' or 'gradle -i'
					LoggerFactory.getILoggerFactory().getLogger('org.apache.fop').level = Level.ERROR
			}

			transformer.transform(src, res);

		} finally {
			if (out != null) {
				out.close();
			}
		}

		if (!foFile.delete()) {
			logger.warn("Failed to delete 'fo' file " + foFile);
		}
	}

	private File getPdfOutputFile(File foFile) {
		return new File(foFile.parent, this.project.rootProject.name + '-reference.pdf')
	}
}
