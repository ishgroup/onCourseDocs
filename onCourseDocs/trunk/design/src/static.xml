<?xml version="1.0" encoding="UTF-8" ?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="static">
	<title>Static files</title>
	<section xml:id="css">
		<title>Stylesheets</title>
		<para>One of the first ways you'll want to modify the look of your site is by changing css
			stylesheets. onCourse comes with a set of default stylesheets to make your life easier,
			so you will want to read this before diving straight in. Inside the '<emphasis
				role="bold">/s/stylesheets</emphasis>' folder on the server are two further folders:
			'css' and 'src'. It is important that you do not edit the files in 'css' directly, but
			instead edit the files in src:</para>
		<para>
			<programlisting>/s/stylesheets/src/</programlisting>
		</para>
		<para>You want to start by looking at the file site.scss. That's the top of the scss structure and
			it includes all the other files you need. Look for lines like
			this:<programlisting>@import "application/settings";</programlisting></para>
		<para>Add any stylesheet modifications you want to this file or any other files you want to
			import, but don't remove the import of the 'base' stylesheets. That import brings in the
			core stylesheet definitions which are required for your onCourse site: shortlists,
			course and class listings, enrolment templates and much more.</para>
		<section xml:id="scss">
			<title>SCSS</title>
			<para>If you didn't recognise the <code>@import</code> command above as CSS, that's because
				onCourse uses a variation of CSS called SCSS. This extends the basic stylesheet
				concepts and adds some very useful abilities:<simplelist>
					<member>
						<link xlink:href="http://sass-lang.com/#nesting">nested
						rules</link></member>
					<member>
						<link xlink:href="http://sass-lang.com/#variables">variables</link></member>
					<member>
						<link xlink:href="http://sass-lang.com/#mixins">mixins</link></member>
					<member>
						<link xlink:href="http://sass-lang.com/#extend">selector
						inheritance</link></member>
				</simplelist></para>
			<para>Every time you edit any file in <filename>/s/stylesheets/src/</filename>, the destination
					<filename>/s/stylesheets/css/site.css</filename> is automatically regenerated.
				This takes less than a second, so you can see the results immediately. This is why
				you should not edit the site.css file directly, as any changes you make will be
				overwritten.</para>
			<para>If you don't want to bother with learning SCSS that's fine. Just write ordinary CSS in the site.scss file. As your stylesheets
				become more complex, you will find that SCSS gives you valuable shortcuts to achieving what you want.</para>
			<para>If you would like to break up your stylesheets into more manageable pieces, add another
				import statement under the 'base' import like
				this:<programlisting>@import "colours";</programlisting></para>
			<para>Then create a file <filename>/s/stylesheets/src/_colours.scss</filename> (with the
				underscore). When you make changes to that file, onCourse will automatically merge
				any content from _colours.scss into the main css for your site.</para>
			<para>Look through the default styles for variables which you can easily modify to
				change your site. For example, override <code>$bodyFontFamily</code> in order to
				change the font right through your site. Or change <code>$primaryColor</code>,
					<code>$secondaryColor</code> and <code>$containerWidth</code>.</para>
		</section>
		<section>
			<title>Bourbon</title>
			<para>By default your stylesheets include Bourbon. This css library gives you lots of useful
				functionality that you'd otherwise have to write by hand. <link
					xlink:href="http://bourbon.io/">Read up on this library</link> and get instant
				rounded corners across all browsers, typography features, reset, and much much more.
				As just one simple example
				<programlisting><code>section {
  @includelinear-gradient(totop,red,orange);
}</code></programlisting></para>
			<para>will give you the following output
				<programlisting><code>section {
  background-color:red;
  background-image:-webkit-linear-gradient(bottom,red,orange);
  background-image:linear-gradient(totop,red,orange);
}</code></programlisting></para>
			<para>without having to remember to put Opera, webkit, Mozilla and html5 elements into your css.
				You don't need to use bourbon, but it can help you keep your site consistent across
				browsers more easily and save you time with common css blocks.</para>
		</section>
		<section>
			<title>Compression</title>
			<para>No matter how many separate files you break up your stylestyles into the output will be
				compressed into one file and minified. This means whitespace is stripped and the
				file is pretty hard to read. However browsers will be able to parse it just fine;
				this minification can make a big improvement to page load speeds and also to your
				SEO.</para>
			<para>Comments will be stripped out, so don't hesitate to put lots of useful notes in
				your scss files.</para>
			<para>Finally we compress the file with gzip to serve it across the internet as fast as possible.
				You'll see these output files as:<itemizedlist>
					<listitem>
						<para><filename>/s/stylesheets/css/site.css</filename></para>
					</listitem>
					<listitem>
						<para><filename>/s/stylesheets/css/site.css.gz</filename></para>
					</listitem>
				</itemizedlist></para>
		</section>
		<section>
			<title>Map</title>
			<para>Because it can be hard to review minified and combined CSS in your browser, we
				also output a map file. This allows Chrome and Firefox developer tools to identify
				the real file and line number in the source scss where your stylesheet rule can be
				found, saving you a lot of searching. This map doesn't work in Firebug 2.x. The map
				can be seen as:</para>
			<para>
				<itemizedlist>
					<listitem>
						<para><filename>/s/stylesheets/css/site.css.map</filename></para>
					</listitem>
				</itemizedlist>
			</para>
			<para>Your browser will automatically find and use that file if it knows how.</para>
		</section>
		<section>
			<title>Responsive design</title>
			<para>It is extremely important in a modern world filled with tablets and smart phones that your
				site is built to make life easy for those users. onCourse sites already are prepared
				with responsive designs at four sizes. That means that as the browser window gets
				smaller with different sized devices, the design itself alters to work better at
				that size. It is still up to you as a designer to properly take advantage of this
				responsive design, but the groundwork is already there for you in onCourse and the
				enrolment pages as well as skillsOnCourse are optimised already.</para>
			<para>onCourse has media sizes of $small-screen, $tablet-screen and $desktop-screen
				throughout the base stylesheets.</para>
		</section>
	</section>

	<section xml:id="js">
		<title>Javascript</title>
		<para>Upload your javascript files into <programlisting>/s/js/</programlisting></para>
		<para>Just like with css, javascript is merged and (optionally) minified to accelerate page loading. Start with site.js and notice these
			lines at the top</para>
		<para>
			<programlisting>//= minify off
//= require base.js
//= require extra.js</programlisting>
		</para>
		<para>This is telling you that minification is disabled and that the javascript files base.js and
			extra.js are automatically merged into the output. This is a different syntax to scss so
			don't get them confused. The output file is called all.js and the files which are merged
			don't need to start with an underscore.</para>
		<section>
			<title>Minification</title>
			<para>Unlike CSS, the javascript is not automatically minified. This is because sometimes javascript minification can actually break
				your javascript (particularly if it contains errors). Browsers will often manage to figure out your broken javascript, but once
				minified errors really cause problems.</para>
			<para>You can enable minification by changing the "off" to "on" and saving the file. Wait about 30 seconds (it takes a while to run
				the code) and then review your site in staging before pushing it to live.</para>
		</section>
		<section>
			<title>Base</title>
			<para>Base.js is included from a hidden place you cannot see. It pulls in some javascript
				essential for the functioning of onCourse, shopping cart, enrolments, searching and
				much more. It also pulls in some libraries you'll probably want anyway, like
				jquery.</para>
		</section>
	</section>
	<section>
		<title>Video</title>
		<para>Although it is possible to load video files directly into the static folder, the onCourse servers are not optimised for serving
			video. You will get much better results by hosting your video at a site such as YouTube or Vimeo and linking to them from within your
			pages. Not only do they have servers placed in data centres around the world, but also the allow streaming of video. That is, the
			video can start playing even before all of the file has downloaded.</para>
		<para>Alternatively you can upload video to the onCourse document management system and
			deliver it from there, however you'll have to create your own video player and tie them
			all together so we still recommend one of the third party video delivery systems like
			YouTube or Vimeo.</para>
	</section>
</chapter>
