<?xml version="1.0" encoding="UTF-8" ?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
	version="5.0" xml:id="emailTemplates">
	<title>Email Templates</title>
	<section xml:id="emailTemplates-emailTemplates">
		<title>Email Templates</title>
		<para>The best way to define a message template is that it is a predefined and pre-constructed message that are sent out manually or
			automatically when on an event has occurred. An event that sends a message is defined by a <link xlink:href="scripts.html">script</link>.
			An example would be that a student has just enrolled into a class via the website or through the office, so the send_enrolment script
			will email the 'Enrolment Confirmation' template to the enrolling student. The fields like ${enrolment.student.contact.firstName} in
			the template will insert the relevant data from onCourse into the message.</para>
		<para>onCourse makes it easy to access and update your templated messages by keeping them in the one place. You can use the templates as
			they are or you can personalise them to your specific needs and requirements. You can also create additional templates, and where
			necessary, accompanying scripts, specific to your business requirements.</para>
		<para>onCourse default templates include both a plain text and HTML version of the template. If make changes to the template wording you
			should change both versions of the template for consistency. The receiver's mail client preferences will determine if they receive the
			plain or HTML version of the message.</para>
		<para>To access templates in onCourse go to File > Preferences > Email templates.</para>
		<section>
			<title>Editing an existing message template</title>
			<orderedlist>
				<listitem>
					<para> In the email template list view, you will see a default list of templates including:</para>
					<orderedlist>
						<listitem>
							<para>Enrolment application accepted</para>
						</listitem>
						<listitem>
							<para>Enrolment application received</para>
						</listitem>
						<listitem>
							<para>Enrolment application rejected</para>
						</listitem>
						<listitem>
							<para>Enrolment confirmation</para>
						</listitem>
						<listitem>
							<para>Header</para>
						</listitem>
						<listitem>
							<para>Footer</para>
						</listitem>
						<listitem>
							<para>Payment receipt</para>
						</listitem>
						<listitem>
							<para>Refund advice</para>
						</listitem>
						<listitem>
							<para>Student notice of class commencement</para>
						</listitem>
						<listitem>
							<para>Tax invoice</para>
						</listitem>
						<listitem>
							<para>Tutor notice of class commencement</para>
						</listitem>
						<listitem>
							<para>USI reminder email</para>
						</listitem>
						<listitem>
							<para>Voucher email</para>
						</listitem>
					</orderedlist>
				</listitem>
				<listitem>
					<para>Double click on a message from list to open it in edit view. The top half of the window is the plain text version of the
						message, the lower half the HTML version.</para>
				</listitem>
				<listitem>
					<para>You can add and remove text from this message. Any text that appears inside a field reference ${like.this} is drawing data
						from the onCourse database. Modify these fields with care.</para>
				</listitem>
				<listitem>
					<para>Make your change to both the plain text and HTML version of the message then save and close.</para>
				</listitem>
			</orderedlist>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/email_template.png" format="png" />
				</imageobject>
				<caption>
					<para>The "Enrolment Confirmation" template window</para>
				</caption>
			</mediaobject>
		</section>
		<section>
			<title>Email headers and footers</title>
			<para>The default template list includes a header and footer template, which contains both a
				plain text and HTML layout.</para>
			<para>These templates are used inside every other email template.</para>
			<para>If you look at the template text you'll see that most of the data used to create
				these templates is drawn from the AVETMISS preferences tab settings. Even if you
				don't report AVETMISS you should complete these fields so the data used in your
				templates is correct.</para>
			<para>The HTML version of the header and footer can insert your businesses logo and use
				your style guide colour scheme with some minor adjustments. If you do not have a web
				designer available you can contact ish to request custom changes to these, and other
				templates.</para>
		</section>
		<section>
			<title>Creating new templates</title>
			<para>New templates can be created at your convenience. Click on the + in the top right hand corner of the template window to create a
				new template.</para>
			<para>The templates are written in a programming language called Groovy which is a Java based language that can run inside the
				onCourse application. An overview of the language can be found at <link xlink:href="http://groovy.codehaus.org"
					>http://groovy.codehaus.org</link>. </para>
			<para>If your organisation has the appropriate IT skills in house, you can create your own custom templates or you can request an ish
				developer create them for you. The development of custom templates is quoted on request.</para>
			<para>To understand the entities, objects and attributes available to use in building a template, we recommend you download Cayenne
				Modeler and read the section about <link xlink:href="#dataModel">using the onCourse data model</link>. </para>
			<section>
				<title>Examples of Groovy in the templates</title>
				<para>Both onCourse email templates and scripts are written in Groovy. onCourse templates are created using the <link
						xlink:href="http://groovy.codehaus.org/Groovy+Templates">GStringTemplateEngine</link>, storing the template files within the
					onCourse database.</para>
				<para>The key to creating a successful template is to ensure you begin with the most appropriate onCourse entity for the task. This
					will make the process of locating and joining other data from the database straightforward.</para>
				<para>If your template is to send information to a student in relation to a particular enrolment, then the enrolment entity would be
					the correct starting point, rather than the student or the contact.</para>
				<para>The entity name you select as the starting point of the template determines the path you use to join to attributes of other
					onCourse entities. For example if you were starting with the entity enrolment and wanted to insert the student's first name, you
					would join the enrolment to the student, then the contact as below:</para>
				<programlisting language="groovy-template">${enrolment.student.contact.firstName}</programlisting>
				<para>However if you wanted to show the same information from a template linked to the invoice entity you would join via the
					enrolment, as the invoice is linked directly to the payer contact, who might be a different person to the student. This example
					would give me the first name of the student enrolled in the class linked to an invoiceLine on an invoice.</para>
				<programlisting>${invoice.invoiceLine.enrolment.student.contact.firstName}</programlisting>
				<para>Where this join would give you the name of the invoice payer contact.</para>
				<programlisting>${invoice.contact.firstName}</programlisting>
				<para>For some fields you may wish to add formatting, such as showing a date in a particular style. The first example shows a short
					date format and the second shows a date time and long date format. This page outlines all the <link
						xlink:href="https://docs.oracle.com/javase/tutorial/i18n/format/simpleDateFormat.html">Java Simple Date formats</link>
					available.</para>
				<programlisting language="groovy-template">${invoice.createdOn.format("d/M/yy")}
${enrolment.courseClass.startDateTime.format("h:mm a EEEE d MMMM yyyy zzzz")}</programlisting>
				<para>The results you wish to display may be the result of a calculation of field values. This example subtracts one field from
					another.</para>
				<programlisting language="groovy-template">Total Paid ${invoice.totalIncTax.subtract(invoice.amountOwing)}</programlisting>
				<para>Inside a template you may wish to include some content that is displayed based on the property of an attribute from the joined
					object. A simple example of this is only displaying a label and value if the value is not null in the database, like the optional
					customer reference field.</para>
				<programlisting language="groovy-template">&lt;% if (invoice.customerReference) { %>
Your reference: ${invoice.customerReference}
&lt;% } %></programlisting>
				<para>A more complex example is this condition which switches the content of the enrolment confirmation based on whether the class
					is self paced or has sessions.</para>
				<programlisting language="groovy-template">&lt;% if (enrolment.courseClass.startDateTime == null) { %>
Start: On enrolment
Expected duration: ${enrolment.courseClass.expectedHours ?: "not specified"} hours
&lt;% } else { %>
Start: ${enrolment.courseClass.startDateTime.format("h:mm a EEEE d MMMM yyyy zzzz")}
End: ${enrolment.courseClass.endDateTime.format("h:mm a EEEE d MMMM yyyy zzzz")}
&lt;% } %>                </programlisting>
				<para>You can also create a loop inside a template to iterate through a list of joined entities. To list the invoice lines joined to
					an invoice you would start with the entity invoice and for each invoice line display the Title, PriceTotalIncTax and Description.
					More examples of collections can be found on <link xlink:href="http://groovy.codehaus.org/Collections">the Groovy website.</link>
				</para>
				<programlisting language="groovy-template"> &lt;% invoice.invoiceLines.each { %>
${it.title}    ${it.priceTotalIncTax}
${it.description}
&lt;% } %></programlisting>
			</section>
		</section>
		<section>
			<title>Sending a manual message using a template</title>
			<para>While many emails may be sent automatically based on their associated <link xlink:href="scripts.hmtl">scripts</link>, template emails
				may also be sent manually, or new templated created just to send manual messages. This allows you to resend important information
				like a Tax Invoice that may have been misplaced by the student or filtered as junk mail. The send option will use the contacts
				current email address, so this tool can also be used to resend messages that bounced due to an incorrectly entered email.</para>
			<para>Template emails can be sent using the appropriate cogwheel option 'send custom email'. The custom emails available are those
				linked to the same entity. For example, in the Enrolment Confirmation screenshot above you can see it is linked to the entity called
				Enrolment. This makes the template available in the enrolment window cogwheel list. </para>
			<para>You can send a email template from the following list views</para>
			<itemizedlist>
				<listitem>
					<para>Enrolment</para>
				</listitem>
				<listitem>
					<para>Contact</para>
				</listitem>
				<listitem>
					<para>Class</para>
				</listitem>
				<listitem>
					<para>Voucher</para>
				</listitem>
				<listitem>
					<para>Waiting List</para>
				</listitem>
				<listitem>
					<para>Invoice</para>
				</listitem>
				<listitem>
					<para>Application</para>
				</listitem>
				<listitem>
					<para>Payment In</para>
				</listitem>
				<listitem>
					<para>Payment Out</para>
				</listitem>
			</itemizedlist>
			<para>You can select one or more contacts from the list of records before selecting the cogwheel tool to send the message.</para>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/send_custom_email.png" format="png" />
				</imageobject>
				<caption>
					<para>Email templates available to send from the enrolment window</para>
				</caption>
			</mediaobject>
		</section>
		<section>
			<title>Default templates</title>
			<para>The default plain and html text templates, in onCourse, can be found in our <uri
				xlink:href="https://github.com/ari/oncourse-scripts/tree/master/email"
				>GitHub documentation.</uri> </para>
			<para/>
			<para>The text can be copied back into onCourse should you wish to revert to the
				onCourse default template for any message.</para>
		</section>
	</section>
</chapter>
