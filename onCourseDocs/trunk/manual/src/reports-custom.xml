<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="reports-custom">
	<title>Creating custom reports</title>
	<subtitle>Get your data out any way you want.</subtitle>
		<para>onCourse takes advantage of a powerful reporting tool called JasperReports. This open source
			library costs you nothing to use and can be extended to add new features. We've extended it to
			understand onCourse data, tied it into a PDF generation system and allowed to you add your own
			reports right into onCourse for all users to easily run.</para>
	
	
	<section xml:id="reports-customReports">
		<title>Getting started with custom reports</title>
		<para>Custom reports can be developed for onCourse by any user, or by ish on request, and then
			imported into onCourse via your client.</para>
			<para>onCourse uses <uri>JasperReports</uri>, an open source tool to create reports. You can add
				your own custom reports to onCourse at any time by creating them with <uri xlink:href="https://community.jaspersoft.com/download">JasperSoft Studio</uri>.
				This is a free tool you can download and install on your system. It runs on Linux,
				Windows and OSX.</para>
			<para>The basic workflow of editing a report is this:</para>
			<para>
				<orderedlist>
					<listitem>
						<para>Export a report template from onCourse (it is usually easier to start
							with something close to what you want)</para>
					</listitem>
					<listitem>
						<para>Edit the report using JasperSoft Studio</para>
					</listitem>
					<listitem>
						<para>Import the report to onCourse</para>
					</listitem>
					<listitem>
						<para>Test</para>
					</listitem>
					<listitem>
						<para>Repeat steps 2-5 until the report works as intended.</para>
					</listitem>
				</orderedlist>
			</para>
			<section>
				<title>Exporting report templates from onCourse</title>
				<para>You can export existing onCourse reports to modify by going to the Automation window and
				looking under PDF Reports and clicking the report you wish to edit. If the report is
				an ish default, you'll need to click the 'Save as new PDF Report' icon in the top
				right of the window to create a copy in order to edit it. Then click 'Edit' and it
				will download a jrxml version of the report to edit.</para>
				<para>Alternatively (and easier) you can access all the current onCourse reports
						<uri xlink:href="https://github.com/ari/oncourse-scripts/">in our github
						repository.</uri> We encourage you to fork that repository and make your
					modifications public for other users where appropriate.</para>
			</section>
			<section>
				<title>Editing reports in JasperSoft Studio</title>
			<para><tip>
					<para>Simple changes to the XML can be made using a text editor if you know what
						to look for. For more complex changes you will want to use JasperSoft
						Studio.</para>
				</tip>JasperSoft Studio cannot be summarised in few words and there are many online
				resources which will help you learn using it. A good starting point is <uri xlink:href="http://community.jaspersoft.com/project/jaspersoft-studio/resources">the official documentation.</uri> You are certainly best trying to modify an
				existing report before creating one from scratch. For now, take an existing report
				and make a small change to it such as changing the colour of some text. Save the
				report.</para>
			<para>You also have the ability for images uploaded to the onCourse document management
				system can be embedded into onCourse reports. This might be used if you want to
				embed an image or logo to a specific report, however we would always recommend
				adding an image to a print background if it's used in more than one report.</para>
			</section>
		<section>
			<title>Importing a report</title>
			<para>onCourse utilises a Java Bean data source which means that you cannot directly
				test a report inside JasperSoft Studio. You must first import it into onCourse in
				order to run it.</para>
			<para>Navigate to File > Preferences > Reports. From here you may click the + sign on
				the top right hand side and select "folder" or "single report". If you have more
				than one report to import, you can select "folder" is to import all the reports in a
				folder reports while the "single report" is to import just the one report.</para>
			<para>You can then be to select your report (.jrxml) from the location where it is saved on your
				computer. Select "open" button after highlighting the file (or folder) you want to
				import.</para>
			<para>You will then either get a message advising you that the import has been
				successful, or unsuccessful. If the import was unsuccessful, the most common reason
				is that the version number was not updated or the keycode was not made unique.
				onCourse will only recognise the report as a new report if it has a unique keycode,
				and will only update an existing report if the version number is higher than the
				version already in the product. You can check the values for these entries in the
				reports window inside onCourse.</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/ImportingFile.png" format="png"/>
					</imageobject>
					<caption>
						<para>Selecting a custom report file for import into onCourse</para>
					</caption>
				</mediaobject>
			</para>
		</section>
	</section>
	<section>
		<title>The structure of a report</title>
		<para>Reports access objects (records in the database) and attributes from those objects. If you
			look at an existing report, you'll see references such as
				<code>$F{contact}.firstName</code>. This is a reference to the contact object which
			was passed to the report and will draw on the page the first name attribute of that
			contact.</para>
		<para>You may also see joins between entities like this
				<code>$F{application}.course.name</code>. You can traverse across joins
			between entities in this way.</para>
		<para>The onCourse entities and all their attributes can be found in our <uri xlink:href="http://www.ish.com.au/s/onCourse/doc/latest/api/">API
				documentation.</uri></para>
		<para>Reports are all able to take advantage of the entire Groovy language within all report
			fields. This can be extremely powerful since you can write any code you want to execute
			within the report engine. A simple example might be
				<code>$F{enrolment}.courseClass.expectedHours ?: "not specified"</code> which would
			print "not specified" if the class has no timetable. More sophisticated code can control
			the repeating sections on a page, sorting of data and much more.</para>
		<section>
			<title>Report Properties</title>
			<para>onCourse expects to see certain properties added to each report. The properties
				can be edited in JasperSoft Studio using by choosing from the menu Edit->Custom
				properties or by just editing the XML by hand. If you look at the example above,
				you'll see all the common properties visible. At a minimum you need "keycode",
				"versionNumber" and "entity". Without these, your report will not be accepted by
				onCourse.</para>
			<para>An example of the parameters found in a report files
				is:<programlisting language="xml">&lt;property name="name" value="Certificate-Attendance"/>
&lt;property name="entity" value="Enrolment"/>
&lt;property name="isSubreport" value="false"/>
&lt;property name="isVisible" value="true"/>
&lt;property name="versionNumber" value="8"/>
&lt;property name="keyCode" value="ish.oncourse.nonVetCertificate"/>
&lt;property name="ish.oncourse.description" value="Report is generated at the conclusion of any non VET short courses to verify
            that the student attended all of the required number of classes.This report prints in
            Portrait format."/></programlisting></para>
			<variablelist>
				<varlistentry>
					<term>name</term>
					<listitem><para>A name to display in the user interface to users wanting to print a report.</para></listitem>
				</varlistentry>
				<varlistentry>
					<term>keyCode</term>
					<listitem><para>Each report has to be identified in the system, therefore it is given an unique property
							called 'keyCode'. We strongly recommend that for any reports you
							customise, you use a different code. This will avoid an update of
							onCourse software overriding your report with new version from our
							developers. If you copy an onCourse report, you should definitely change
							this to your own code.</para></listitem>
				</varlistentry>
				<varlistentry>
					<term>versionNumber</term>
					<listitem><para>A whole number, has to be increased every time a report is changed otherwise your
							modifications may not be visible.</para></listitem>
				</varlistentry>
				<varlistentry>
					<term>entity</term>
					<listitem><para> Identifies which is the starting point for the report, ie. report with value 'Certificate'
							will be available in print menu for list of certificates.</para></listitem>
				</varlistentry>
				<varlistentry>
					<term>isVisible</term>
					<listitem><para> - can only take value of 'true' or 'false', indicates whether the report is visible in the
							print dialog </para></listitem>
				</varlistentry>
				<varlistentry>
					<term>isSubreport</term>
					<listitem><para> - some reports are just injected inside others, this allows to specify this fact and hide
							this report from the user choice</para></listitem>
				</varlistentry>
				<varlistentry>
					<term>ish.oncourse.reports.following</term>
					<listitem><para>Use this property if you need print many reports as one, just add to this property a report's
							key (or keys). If you need put more then one key - separate keys with
							";". Any reports in here will be automatically printed after the initial
							report. This is particularly useful for certificates.</para></listitem>
				</varlistentry>
				<varlistentry>
					<term>ish.oncourse.reports.isObjectOnSeparatePage</term>
					<listitem><para>If this property is set to true, then each record is printed on a separate page. This is
							useful for invoices (for example) which should start a new page after
							every invoice record.</para></listitem>
				</varlistentry>
				<varlistentry>
					<term>ish.oncourse.reports.description</term>
					<listitem><para>A description to show to users in the onCourse user interface. Put some text in here to
							describe what the report does.</para></listitem>
				</varlistentry>
			</variablelist>
		</section>
		<section>
			<title>Data fields</title>
			<para>Attributes from any onCourse data object can be added as fields to your report. So if the
				report has an entity of "Room" then you can access its attributes directly like this
					<code>$F{name}</code>. You can find all the onCourse attributes in our <link
					xlink:href="https://www.ish.com.au/s/onCourse/doc/latest/api/">API
					documentation</link>.</para>
			<para>You can also directly access relations in this way <code>$F{site}.name</code> and use the full
				power of the Groovy language in these expressions. So for a report rooted in the
				Enrolment entity you might use <code>${courseClass}.course.modules?.nationalCode</code> This
				expression will find the course linked to the current class, get a list of modules,
				take the first one (using a null safe operator so that nothing bad happens if there
				isn't any modules liked at all), then display the national code.</para>
			<para>Custom attributes can be accessed by passing the custom field name to the customField()
				method. For example, if a contact had a custom field called 'how did you hear', the
				data stored in this field could be referenced by: <code>$F{contact}.customField("how
					did you hear")</code>.</para>
			<para> </para>
		</section>
	</section>
</chapter>
