<?xml version="1.0" encoding="UTF-8" ?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="scripts">
	<title>onCourse scripts and custom workflow</title>
	<para>onCourse has a powerful scripting engine which can be used to implement your own specific
		workflow rules into onCourse. You can use script to send automated emails or SMS, change
		records inside the system, integrate with third party tools such as analytics or mailing
		lists, export data to finance systems or your LMS. And much much more. Scripts allow your
		student management system to become a completely customisable tool with your business
		workflow engine built right into onCourse. You can create and update onCourse records on an
		event, send messages to key contacts when a record is created or changed, or automating the
		publishing, exporting or printing of data how and when you require it.</para>
	<para>Scripting allows you to write directly to the database, calling your own program code that
		can automate almost any business practice you can imagine. Any database changes they attempt
		are subject to similar validation as data input manually.</para>
	<para>Scripts often work hand in hand with <link xlink:href="emailTemplates.html">onCourse
			templates</link>, sending automated messages to various onCourse contacts.</para>
	<section xml:id="scripts-whatYouCanDo">
		<title>What can you do with scripts?</title>
		<para>Some simple ideas that could be implemented with an onCourse script:</para>
		<itemizedlist>
			<listitem>
				<para>Run a daily transaction export at 2am for the prior 24 hours and email it to
					your Accounts Manager</para>
			</listitem>
			<listitem>
				<para>Automatically send an email to a student on their birthday containing a $10
					gift voucher</para>
			</listitem>
			<listitem>
				<para>Notify tutors their class is confirmed running when the class minimum
					enrolment number has been reached </para>
			</listitem>
			<listitem>
				<para>Notify coordinators one week before a class is due to commence if the class is
					under the minimum</para>
			</listitem>
			<listitem>
				<para>Automatically notify all students on a course waiting list when you publish a
					new instance of class to the web</para>
			</listitem>
			<listitem>
				<para>Send a monthly notification to debtors or creditors of their onCourse balance
					outstanding</para>
			</listitem>
			<listitem>
				<para>Send your Enrolment Manager a daily email of students who failed to complete
					the online enrolment process so they can manually follow them up</para>
			</listitem>
			<listitem>
				<para>Send the CEO weekly summary of enrolments, income and trending programs</para>
			</listitem>
			<listitem>
				<para>Schedule a series of daily reports to print rooms labels, class rolls and sign
					in sheets every business day morning, and for all weekend classes on a Friday
					morning</para>
			</listitem>
			<listitem>
				<para>Print and send reports to site coordinators for all sessions running at their
					venue the following week</para>
			</listitem>
			<listitem>
				<para>Email students at the conclusion of their course suggesting other courses they
					might be interested in, with a time limited discount offer</para>
			</listitem>
			<listitem>
				<para>Email VET students' employers three months after the conclusion of their
					course requesting they complete the Employer Satisfaction Survey</para>
			</listitem>
			<listitem>
				<para>Integrate with an LMS such as Moodle or Canvas where you push student
					enrolments in real time as enrolments are created. You can use onCourse tags to
					control which courses are handled in this manner.</para>
			</listitem>
			<listitem>
				<para>Integrate with MailChimp or other mailing list manager to synchronise mailing
					list contacts in both directions</para>
			</listitem>
			<listitem>
				<para>Verify that course administrators are writing at least 100 words of course
					description before putting the course onto your website</para>
			</listitem>
			<listitem>
				<para>Send an email to your administrator if a course administrator schedules a
					course for a public holiday</para>
			</listitem>
			<listitem>
				<para>Automate integration with your accounting system</para>
			</listitem>
			<listitem>
				<para>Email students the day before their class starts</para>
			</listitem>
			<listitem>
				<para>SMS to tutors one hour before the should be teaching</para>
			</listitem>
			<listitem>
				<para>Automate compliance exports such as VET FEE HELP or AVETMISS</para>
			</listitem>
			<listitem>
				<para>Update course content on your website with data from some other source</para>
			</listitem>
			<listitem>
				<para>Control which classes are visible on your website and how many days before
					start they are available for enrolment</para>
			</listitem>
			<listitem>
				<para>Automate of creating Facebook or Twitter comments from "what's hot today" or
					new courses being published</para>
			</listitem>
			<listitem>
				<para>Push course enrolment events to Google analytics so that you can see office
					enrolments alongside web enrolments in your statistical reports</para>
			</listitem>
		</itemizedlist>
	</section>
	<section xml:id="scripts-Permissions">
		<title>Script permissions</title>
		<para>All onCourse license options can choose to enable or disable scripts provided by ish.
			All paid license plans can commission changes to existing scripts or request new custom
			scripts from ish. Customers with Enterprise level licensing can modify and add to their
			own scripts to onCourse themselves.</para>
		<para>If you have the appropriate license for modifying scripts, you can control which users
			are able to edit them in the user Roles. We recommend you only give this permission to
			users with technical skills to properly make changes to the scripts since a bad script
			can have far ranging implications for your system.</para>
	</section>
	<section xml:id="scripts-onCourseDefaultScripts">
		<title>onCourse default scripts</title>
		<para>These scripts have been added for all users of onCourse, but are switched off by
			default. You can enable them in your database.</para>
		<orderedlist>
			<listitem>
				<para> Send a reminder email to students one day before their class commences</para>
			</listitem>
			<listitem>
				<para> Send a reminder email to tutors two days before their class commences</para>
			</listitem>
			<listitem>
				<para> Send a reminder email to VET students every 7 days for the next month if they
					haven't supplied their USI after enrolment</para>
			</listitem>
			<listitem>
				<para> Send a receipt on the processing of a successful payment in for a payment
					taken not during the enrolment process</para>
			</listitem>
			<listitem>
				<para> Send refund advice on creation of a successful payment out e.g. credit card
					refund</para>
			</listitem>
			<listitem>
				<para> Send an email to a student to notify them their application has been
					accepted, what their custom enrolment fee is and how they can enrol</para>
			</listitem>
			<listitem>
				<para> Send an email to a student whose application has been rejected</para>
			</listitem>
		</orderedlist>
	</section>
	<section xml:id="scripts-scriptTriggers">
		<title>Script triggers</title>
		<para>Each script is triggered by an event. An event can be time based (cron) or linked to a
			record change.</para>
		<section>
			<title>Time based events</title>
			<para>onCourse scripts can be triggered by a cron expression for firing at a repeating
				interval. cron is a unix tool that has existed since the 1970s and is extremely
				powerful and flexible. You need only write six fields separated by spaces to
				describe the recurring timing. For example, you can specify "every Monday at 9am" or
				"1am on the first Sunday of every month".</para>
			<variablelist>
				<title>The fields are:</title>
				<varlistentry>
					<term>Seconds</term>
					<listitem>
						<para> Allowed values: 0-59</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Minutes</term>
					<listitem>
						<para> Allowed values: 0-59</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Hours</term>
					<listitem>
						<para> Allowed values: 0-23</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Day of month</term>
					<listitem>
						<para> Allowed values: 1-31</para>
						<para> Special characters: ? L W</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Month</term>
					<listitem>
						<para> Allowed values: 1-12 or JAN-DEC</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Day of week</term>
					<listitem>
						<para> Allowed values: 1-7 or MON-SUN</para>
						<para>Special characters: ? L #</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>Every field allows the special option '*' which means all values. For example, '*'
				in the minute field means every minute. In each field you can also use ranges. For
				example '13-15' in the hour field means 1pm, 2pm and 3pm. And ',' can be used for
				multiple values such as 'mon,wed,fri' in the day of week field. You can specify a
				repeating increment in a field with a '/'. For instance "0/15" in the hour field
				means every 15 minutes starting at the hour. Or "2/3" in the day of month field
				means every three days starting on the second day of the month.</para>
			<variablelist>
				<title>Special characters</title>
				<varlistentry>
					<term>? ("no value")</term>
					<listitem>
						<para>Because day-of-month and day-of-week overlap in meaning, one of those
							two fields should always be '?'. </para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>L ("last")</term>
					<listitem>
						<para>has different meaning in each of the two fields in which it is
							allowed. For example, the value "L" in the day-of-month field means "the
							last day of the month" - day 31 for January, day 28 for February on
							non-leap years. If used in the day-of-week field by itself, it simply
							means "7" or "SAT". But if used in the day-of-week field after another
							value, it means "the last xxx day of the month" - for example "6L" means
							"the last friday of the month". When using the 'L' option, it is
							important not to specify lists, or ranges of values, as you'll get
							confusing results.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>W ("weekday")</term>
					<listitem>
						<para>used to specify the weekday (Monday-Friday) nearest the given day. As
							an example, if you were to specify "15W" as the value for the
							day-of-month field, the meaning is: "the nearest weekday to the 15th of
							the month". So if the 15th is a Saturday, the trigger will fire on
							Friday the 14th. If the 15th is a Sunday, the trigger will fire on
							Monday the 16th. If the 15th is a Tuesday, then it will fire on Tuesday
							the 15th. However if you specify "1W" as the value for day-of-month, and
							the 1st is a Saturday, the trigger will fire on Monday the 3rd, as it
							will not 'jump' over the boundary of a month's days. The 'W' character
							can only be specified when the day-of-month is a single day, not a range
							or list of days.</para>
						<para>The 'L' and 'W' characters can also be combined in the day-of-month
							field to yield 'LW', which translates to "last weekday of the month".
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>#</term>
					<listitem>
						<para>used to specify "the nth" XXX day of the month. For example, the value
							of "6#3" in the day-of-week field means "the third Friday of the month"
							(day 6 = Friday and "#3" = the 3rd one in the month). Other examples:
							"2#1" = the first Monday of the month and "4#5" = the fifth Wednesday of
							the month. Note that if you specify "#5" and there is not 5 of the given
							day-of-week in the month, then no firing will occur that month.</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>The legal characters and the names of months and days of the week are not case
				sensitive. MON is the same as mon.</para>
			<para>
				<table frame="void">
					<caption>Examples</caption>
					<tbody>
						<tr>
							<td>0 0 12 * * ? </td>
							<td>Fire at 12pm (noon) every day</td>
						</tr>
						<tr>
							<td>0 15 10 ? * * </td>
							<td>Fire at 10:15am every day</td>
						</tr>
						<tr>
							<td>0 15 10 * * ? </td>
							<td>Fire at 10:15am every day</td>
						</tr>
						<tr>
							<td>0 15 10 * * ? * </td>
							<td>Fire at 10:15am every day</td>
						</tr>
						<tr>
							<td>0 15 10 * * ? 2005 </td>
							<td>Fire at 10:15am every day during the year 2005</td>
						</tr>
						<tr>
							<td>0 * 14 * * ? </td>
							<td>Fire every minute starting at 2pm and ending at 2:59pm, every
								day</td>
						</tr>
						<tr>
							<td>0 0/5 14 * * ? </td>
							<td>Fire every 5 minutes starting at 2pm and ending at 2:55pm, every
								day</td>
						</tr>
						<tr>
							<td>0 0/5 14,18 * * ? </td>
							<td>Fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire
								every 5 minutes starting at 6pm and ending at 6:55pm, every day</td>
						</tr>
						<tr>
							<td>0 0-5 14 * * ? </td>
							<td>Fire every minute starting at 2pm and ending at 2:05pm, every
								day</td>
						</tr>
						<tr>
							<td>0 10,44 14 ? 3 WED </td>
							<td>Fire at 2:10pm and at 2:44pm every Wednesday in the month of
								March.</td>
						</tr>
						<tr>
							<td>0 15 10 ? * MON-FRI </td>
							<td>Fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and
								Friday</td>
						</tr>
						<tr>
							<td>0 15 10 15 * ? </td>
							<td>Fire at 10:15am on the 15th day of every month</td>
						</tr>
						<tr>
							<td>0 15 10 L * ? </td>
							<td>Fire at 10:15am on the last day of every month</td>
						</tr>
						<tr>
							<td>0 15 10 ? * 6L </td>
							<td>Fire at 10:15am on the last Friday of every month</td>
						</tr>
						<tr>
							<td>0 15 10 ? * 6L </td>
							<td>Fire at 10:15am on the last Friday of every month</td>
						</tr>
						<tr>
							<td>0 15 10 ? * 6L 2002-2005 </td>
							<td>Fire at 10:15am on every last friday of every month during the years
								2002, 2003, 2004 and 2005</td>
						</tr>
						<tr>
							<td>0 15 10 ? * 6#3 </td>
							<td>Fire at 10:15am on the third Friday of every month</td>
						</tr>
						<tr>
							<td>0 0 12 1/5 * ? </td>
							<td>Fire at 12pm (noon) every 5 days every month, starting on the first
								day of the month.</td>
						</tr>
						<tr>
							<td>0 11 11 11 11 ? </td>
							<td>Fire every November 11th at 11:11am.</td>
						</tr>
					</tbody>
				</table>
			</para>
		</section>
		<section>
			<title>Record change events</title>
			<para>Rather than a specific time, the trigger for a script can instead be a record
				change. You are able to specify the entity name and the type of change: add, edit or
				delete. Note that entity names are mostly the same as database table names, but
				there is a difference. Some entities don't map directly to the database.</para>
			<para>For more details of what entities are available, please consult our detailed code
				documentation.</para>
		</section>
	</section>
	<section xml:id="scripts-Content">
		<title>Script content</title>
		<para>The actual script itself is written in Groovy which gives you power to implement
			almost anything. You have full access to the onCourse Server structure, code and data.
			With great power comes great responsibility, so be aware that you have the power to
			destroy data although there are layers of validation to help prevent you doing anything
			too seriously bad unless you try hard.</para>
		<para>Let's pull apart a sample script. This one sends an email when an invoice is
			created.</para>
		<para>
			<programlisting language="groovy">def run(args) {
	def i = args.entity
			
	if (i.confirmationStatus == ConfirmationStatus.NOT_SENT) {
		def m = Email.create("Tax Invoice")
		m.bind(invoice: i)
		m.to(i.contact)
		
		m.send()
		
		i.setConfirmationStatus(ConfirmationStatus.SENT)
		args.context.commitChanges()
	}  
}</programlisting>
		</para>
		<para>Every script should begin with this line:</para>
		<para>
			<programlisting language="groovy">def run(args) {</programlisting>
		</para>
		<para>In that variable "args" you will get access to important objects to help you write
			your script. The most important two are:</para>
		<variablelist>
			<title/>
			<varlistentry>
				<term>args.entity</term>
				<listitem>
					<para>This is the object which caused the script to run. It is null if this
						script was triggered by a cron event.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>args.context</term>
				<listitem>
					<para>This is the Cayenne context within which the script runs. You'll use this
						to perform searches for other records or to commit changes back to the
						database.</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			<programlisting language="groovy">def i = args.entity</programlisting>
		</para>
		<para>For convenience we've assigned this object to a variable with a nicer name. This just
			makes the rest of our script easier to read.</para>
		<para>
			<programlisting language="groovy">if (i.confirmationStatus == ConfirmationStatus.NOT_SENT) {</programlisting>
		</para>
		<para>So our invoice has an attribute confirmationStatus. We can find these attributes
			documented in the onCourse javadocs. In this case we just want to check to see that we
			still need to send this email. We don't want to send it if the invoice was part of a
			failed payment and reversal, or if the user already received it.</para>
		<para>
			<programlisting language="groovy">def m = Email.create("Tax Invoice")</programlisting>
		</para>
		<para>So let's make a new email and call it "m".</para>
		<para>
			<programlisting language="groovy">m.bind(invoice: i)</programlisting>
		</para>
		<para>That email template has a property called "invoice" and we'll bind our invoice object
			to that property.</para>
		<para>
			<programlisting language="groovy">m.to(i.contact)</programlisting>
		</para>
		<para>The invoice has a property called 'contact' and we'll make sure the message will be
			sent to that person.</para>
		<para>
			<programlisting language="groovy">m.send()</programlisting>
		</para>
		<para>And we are done. This will finish all the work of creating the message.</para>
		<para>
			<programlisting language="groovy">i.setConfirmationStatus(ConfirmationStatus.SENT)</programlisting>
		</para>
		<para>We better now set the invoice to sent so that we don't send this email again. For
			example, this script might be triggered because we edit the invoice to change the due
			date. In that case, the script will be triggered.</para>
		<para>
			<programlisting language="groovy">args.context.commitChanges()</programlisting>
		</para>
		<para>This last step is very important. All the changes we made (including the email we
			created) exist only in memory and not saved to the database until this step. Unless we
			save it, no email will go out and no other user will see our changes. When we commit,
			all the validation will run. For example, onCourse will prevent you from sending an
			email which has no 'to' contact and so the commit will fail. onCourse will also
			synchronise any objects with your onCourse website. This allows you to programmatically
			modify website content directly from these scripts.</para>
		<para>For full details of the groovy language consult the official documentation here
			http://groovy.codehaus.org/ Groovy has very nice support for iterating through
			collections (such as a big list of database objects), regular expression matching and
			much more. Plus you get to use all the Java libraries already included inside of
			onCourseServer plus the full Java JRE.</para>
	</section>
	<section xml:id="scripts-defaultScripts">
		<title>Default scripts</title>
		<para>All the default scripts come with a new installation of onCourse. They can all be found in
			our <uri xlink:href="https://github.com/ari/oncourse-scripts/tree/master/scripts">GitHub
				documentation.</uri></para>
	</section>
</chapter>
