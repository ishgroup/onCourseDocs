<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="search">
    <title>Search</title>
    
    <note>
        <para> IMPORTANT: This chapter is under construction and subject to change.</para>
    </note>
    <section xml:id="search-introduction"><title>Introduction</title>
        <para>onCourse has powerful tools for searching across every piece of data you have
            collected. You can search in lists, perform advanced searches on any attribute of the
            data and use these searches to write scripts and reports. In this chapter we'll start
            from the simplest tools and then show you more advanced possibilities.</para>
    </section>
    
    <section xml:id="search-listView"><title>Lists</title>
        <para>Every list view has a search panel across the bottom.<mediaobject>
                <imageobject>
                    <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/search/searchBasic.png" format="png"/>
                </imageobject>
            </mediaobject></para>
        <para>Typing into the Search bar will retrieve all records that match your input across
            certain fields. For example, in the Contact list, the text you enter will be found in
            first name, last name and email address fields.  <mediaobject>
                <imageobject>
                    <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/search/searchFuzzyName.png" format="png"/>
                </imageobject>
                <caption>
                    <para>Searching units of competency</para>
                </caption>
            </mediaobject>
        </para>      
    </section>
    <section xml:id="search-findRelated">
        <title>Find related records</title>
        <para>Find related records is one of the most powerful tools inside onCourse, let you
            quickly jump from window to window, finding records related to groups of other
            records. This function is located next to the advanced search in each list view in
            onCourse.</para>
        <para>For example, to locate all the employers of all the students aged 18 to 25 in the
            last three months of VET programs to send the Employer Satisfaction Survey to you
            can start by searching for all classes with a particular tag or use the advanced
            search on VET course flag. Once you have those classes, you can highlight those
            delivered in the last three months, and select from the find related icon 'Enrolled
            students'. </para>
        <mediaobject>
            <imageobject>
                <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/find_related_records.png" format="png"/>
            </imageobject>
            <caption>
                <para>Finding enrolled students related to a class from the cogwheel menu</para>
            </caption>
        </mediaobject>
        <para>Once the student list has opened, you can search that list of results for students aged 18
            to 25. The list view that has opened is in a special mode called 'custom selection'
            which you can see in the window header bar. This means other searches or filters you
            run on this window are only inside the special set of results you have created as a
            list.</para>
        <para>With the reduced list of students, you can use the find related icon to select
            contacts related as Employer. From this new window, you can use the cog wheel to
            send a message to the student's employers.</para>
        <note><para>Find related can only be run on a max of 1000 records</para></note>
        <mediaobject>
            <imageobject>
                <imagedata scalefit="1" width="70%" contentdepth="70%" fileref="images/find_related_records_search.png" format="png"/>
            </imageobject>
            <caption>
                <para>Finding the employers of enrolled students related to a class</para>
            </caption>
        </mediaobject>
    </section>
    
    <section xml:id="search-advanced">
        <title>Advanced search query language</title>
        <para>You can construct more powerful Advanced Search queries using the onCourse query
            language. You can toggle between Basic and Advanced Search by clicking the magnifying
            glass icon on the left of the search panel. When you are in advanced mode, a plus symbol
            appears next to the icon.<mediaobject>
                <imageobject>
                    <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/search/searchAdvanced.png" format="png"/>
                </imageobject>
            </mediaobject>
        </para>
        <para>A simple query consists of a field, followed by an operator, followed by a
            value:</para>
        <programlisting> 
                title starts with "Apply"             
            </programlisting>
        <para>In the above example, the field is 'title', the operator is 'starts with', and the
            value is 'Apply'. In the Unit of Competency list this will show you records beginning
            with 'Apply'. Two or more queries can be linked together with conditional
            operators.</para>
        <programlisting> 
                title starts with 'Apply' and nationalCode starts with "B"                  
            </programlisting>
        <para>In this example, 'and' is the conditional operator that combines the two separate
            queries. Only records that satisfy both queries are returned.</para>
        <mediaobject>
            <imageobject>
                <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/search/searchOperator.png" format="png"/>
            </imageobject>
        </mediaobject>
        <section xml:id="search-advanced-fields">
            <title>Fields</title>
            <para>When you click into the Advanced Search box, a drop-down list of available fields
                will appear. The fields that are available to use in queries will change depending
                on which record type you are searching on. </para>
        </section>
        <section xml:id="search-advanced-operators">
            <title>Operators</title>
            <para>Operators are methods of comparing two entities. The two entities that are being
                compared are called operands. The first operand appears on the left of the operator,
                while the second operand appears on the right.</para>
            <para>
                <variablelist>
                    <varlistentry>
                        <term>EQUALS ( = ) </term>
                        <listitem>
                            <para>EQUALS  returns true if the left hand side  equal to the
                                right</para>
                            <para>
                                <programlisting> 
createdOn = today
                                </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>NOT EQUAL: ( != )</term>
                        <listitem>
                            <para>NOT EQUAL returns true if the left hand side isn't equal to
                                the right</para>
                            <para>
                                <programlisting> 
                                        deliveryMode != ONLINE
                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>LESS THAN: &lt;</term>
                        <listitem>
                            <para>LESS THAN returns true if the left hand side  is less than the
                                right.</para>
                            <para>LESS THAN can also used with EQUALS to return true if the left
                                is less than or equal too the right</para>
                            <para> <programlisting> 
                                        enrolmentCount &lt; 10
                                    </programlisting>
                                <programlisting> 
                                        enrolmentCount &lt;= 9
                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>GREATER THAN: &gt;</term>
                        <listitem>
                            <para>GREATER THAN returns true if the left hand side  is greater
                                than the right.</para>
                            <para>GREATER THAN  can be used with EQUALS to return true if the
                                left is greater than or equal to the right</para>
                            <para> <programlisting> 
                                        age &gt; 17
                                    </programlisting>
                                <programlisting> 
                                        age &gt;= 18
                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>BETWEEN: ( .. )</term>
                        <listitem>
                            <para>BETWEEN ( .. ) is used to specify a date range. BETWEEN ( .. ) will return records that with the specified attribute that occurs
                            in the given range.</para>
                            <para> 
                                <programlisting>
                                    createdOn 01/01/2018 .. 01/02/2018
                                </programlisting>
                            </para>
                            <para>BETWEEN can be used with a star closure ( * ).The star closure can be used to represent all dates before/ all dates after a given date.</para>
                            <programlisting>
                                // all dates before 01/01/2018
                                createdOn *..01/01/2018
                            </programlisting><programlisting>
                                // all dates after 01/01/2018
                                createdOn 01/01/2018..*
                            </programlisting>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>IN</term>
                        <listitem>
                            <para>IN will return true if the left exists within the right hand
                                side set.</para>
                            <para>A set is denoted as a list of items, where each element of the set
                                is separated by a comma.</para>
                            <para> 
                                <programlisting> 
                                    confirmationStatus in NOT_SENT, DO_NOT_SEND
                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>BEFORE</term>
                        <listitem>
                            <para>BEFORE that will return true if the left hand side occurs
                                before the right.</para>
                            <para>
                                <programlisting> 
                                        createdOn before today
                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>AFTER: after</term>
                        <listitem>
                            <para>AFTER will return true if the left hand side  occurs after the
                                right.</para>
                            <para>
                                <programlisting> 
                                        createdOn after today
                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <para>
                <variablelist>
                    <varlistentry>
                        <term>CONTAINS</term>
                        <listitem>
                            <para> CONTAINS returns true if the left hand side contains the
                                right.</para>
                            <para>
                                <programlisting> 
                                            name contains "Gardening"
                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>STARTS WITH:</term>
                        <listitem>
                            <para>STARTS WITH returns true if the left hand side starts with the
                                right.</para>
                            <para> 
                                <programlisting> 
                                        name starts with "Cooking"
                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>ENDS WITH: ends with</term>
                        <listitem>
                            <para> ENDS WITH returns true if the left hand side ends with the
                                right.</para>
                            <para> 
                                <programlisting> 
                                        name ends with "Expert"
                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>NOT</term>
                        <listitem>
                            <para>NOT reverses the returned value of all of the previous
                                operations.</para>
                            <para>For example, 'code not contains "Gardening"' with return all
                                courses that has a code that does not contain the string 'Gardening' </para>
                            <para> 
                                <programlisting> 
                                        name not like John
                                    </programlisting>
                                <programlisting> 
                                        name not contains "Gardening"
                                    </programlisting>
                                <programlisting> 
                                        name not starts with "Cooking"
                                    </programlisting>
                                <programlisting> 
                                        name not ends with "Beginners"
                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>HAS TAG: ( # ) </term>
                        <listitem>
                            <para>The HAS TAG ( # ) operator with return records that have the
                                specified tag in onCourse.</para>
                            <para>
                                <programlisting>
                                    CourseClass # 'health and care'
                                </programlisting>
                            </para>
                            
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term> FILTER TAG: ( @ ) </term>
                        <listitem>
                            <para>The FILTER TAG ( @ ) operator is used to as shorthand to call a query save with a tag. </para>
                            <para>For example, imagine the following query is saved with the tag <emphasis>@kids</emphasis>:
                                <programlisting>
                                    Age &lt;= 12
                                </programlisting>
                            </para>
                            <para>
                                <emphasis>@kid</emphasis> can then be called in the construction of
                                other queries
                                <programlisting>
                                    @kid and isMale is true
                                </programlisting>
                                is equivalent to
                                <programlisting>
                                    Age &lt;= 12 and isMale is true
                                </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term> LIKE: ( ~ ) </term>
                        <listitem>
                            <para>The LIKE (~) operator is used to search a field for a specific
                                string pattern.</para>
                            <para>There are two special wild card characters used with the LIKE
                                operator: <orderedlist>
                                    <listitem>
                                        <para>%: the percent sign is used to represent any
                                            amount of characters (including zero)</para>
                                    </listitem>
                                    <listitem>
                                        <para>_: the underscore is used to represent exactly one
                                            character</para>
                                    </listitem>
                                </orderedlist>
                            </para>
                            <para> Examples of the LIKE operator with wild card characters <variablelist>
                                <varlistentry>
                                    <term>name ~ "a%"</term>
                                    <term>name like "a%"</term>
                                    <listitem>
                                        <para>finds any record that has a name starting with
                                            "a"</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>name ~ "%a"</term>
                                    <listitem>
                                        <para>finds any record that has a name ending with
                                            "a"</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>name ~ "%ab%"</term>
                                    <listitem>
                                        <para>finds any record that has a name containing
                                            "ab"</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>name ~ "_a%"</term>
                                    <listitem>
                                        <para>finds any record that has a name with "a" as
                                            the second letter</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>name ~ "_%_%_%"</term>
                                    <listitem>
                                        <para>finds any record that has a name with at least
                                            a length of 3 characters</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>name ~ "a%b"</term>
                                    <listitem>
                                        <para>finds any record that has a name starting with
                                            "a" and ending with "b"</para>
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                            </para>
                            <para>
                                <programlisting> 
                                            name ~ "Gardening%"
                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>

        </section>
        <section xml:id="search-advanced-conditions">
            <title>Conditions</title>
                <para> Conditions can be used to chain multiple queries together to build more
                    complex searches. </para>
                <para>
                    <variablelist>
                        <varlistentry>
                            <term>OR</term>
                            <listitem>
                                <para> The OR condition will return true if either left hand side or
                                    right hand side are true.</para>
                                <para>
                                    <programlisting> 
                                            condition or condition
                                        </programlisting>
                                    <programlisting> 
                                        name contains "Gardening" or code starts with "GAR"
                                        </programlisting>
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>AND: and</term>
                            <listitem>
                                <para>The AND condition will return true if both the left hand and
                                    right hand sides are true.</para>
                                <para>
                                    <programlisting> 
                                            condition and condition
                                    </programlisting>
                                    <programlisting> 
                    startDateTime = tomorrow and successAndQueuedEnrolments >= minimumPlaces 
                                    </programlisting>
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>

        </section>
        <section xml:id="search-advanced-keywords"> <title>Keywords</title>
            <para>In onCourse, a keyword is a reserved word that has a predefined meaning. Keywords can assist in creating search queries. </para>
            <variablelist>
                <varlistentry>
                    <term>DATES</term>
                    <listitem>
                        <para>Date keywords:
                            <variablelist>
                                <varlistentry>
                                    <term>today</term>
                                    <listitem>
                                        <para>the current day from 00:00 to 23:59</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>yesterday</term>
                                    <listitem>
                                        <para>yesterday from 00:00 to 23:59</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>tomorrow</term>
                                    <listitem>
                                        <para>tomorrow from 00:00 to 23:59</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>last year</term>
                                    <listitem>
                                        <para>from January 1 00:00 to December 31 23:59 of the previous year</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>last month </term>
                                    <listitem>
                                        <para>from the 1st of the previous month 00:00, to the last
                                            day of the previous month 23:59 </para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>last week</term>
                                    <listitem>
                                        <para>from Monday 00:00 to Sunday 23:59 of the previous week.</para>
                                        <para>If 'today' is Thursday 13 September 2018, then 'last week' will be from Monday 3 September 2018 to 9 September 2018.</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>next year</term>
                                    <listitem>
                                        <para>from January 1 00:00 to December 31 23:59 of the next year</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>next month</term>
                                    <listitem>
                                        <para>from the 1st of the next month 00:00 , to the last day
                                            of the next month 23:59</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>next week</term>
                                    <listitem>
                                        <para>from Monday 00:00 to Sunday 23:59 of the next week.</para>
                                        <para>If 'today' is Thursday 13 September 2018, then 'next
                                            week' will be from Monday 17 September 2018 to 24
                                            September 2018.</para>
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                        </para>
                        <para>
                            <programlisting>
                                    createdOn today
                                    createdOn yesterday .. tomorrow
                                    startDateTime last week
                                    endDateTime next year
                                </programlisting>
                        </para>
                        <para>Dates can be operated on using arithmetic and specifying the time unit
                            to add/subtract.</para>
                        <para>
                            <programlisting>
                                    createdOn today + 1 day
                                    createdOn yesterday..tomorrow + 2 week
                                    createdOn * .. today + 6 month
                                    createdOn 9:00 .. 19:00 today - 1 year
                                </programlisting>
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>ME</term>
                    <listitem>
                        <para>ME allows for search to be constructed using the currently logged in user as a query value.</para>
                        <para> 
                            <programlisting>
                                          Invoice.createdByUser = me   
                            </programlisting>
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section xml:id="search-advanced-arithmetic"> <title>Arithmetic</title>
            <para>
                Basic arithmetic can be performed in advanced queries.
                <programlisting>
                    feeHelpAmount is 100 + 50
                    feeHelpAmount is 100 - 50
                    feeHelpAmount is 100 / 2
                    feeHelpAmount is 100 * 5
                    feeHelpAmount is 100 % 3
                </programlisting>
            </para>
        </section>
    </section>
    <section xml:id="search-script"><title>Searching in custom scripts</title>
        <para>Scripts often need retrieve records from your database to perform some function. For
            example, if you wanted to contact all students who are enrolled in a class starting
            tomorrow, you would need to retrieve all classes that start tomorrow from the
            database.</para>
        
            <para>Add a query panel to your script like this.</para>
            <mediaobject>
                <imageobject>
                    <imagedata scalefit="1" width="100%" contentdepth="100%" fileref="images/search/searchScript.png" format="png"/>
                </imageobject>
            </mediaobject>
        <para>The results of this query are then available to you in your script in the variable
            'records'. You can use this to perform additional actions in the script. </para>
    </section>
</chapter>
