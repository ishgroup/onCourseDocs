<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="search">
    <title>Search</title>
    <section xml:id="search-introduction">
        <title>Introduction</title>
        <para>onCourse has powerful tools for searching across every piece of data you have
            collected. You can search in lists, perform advanced searches on any attribute of the
            data and use these searches to write scripts and reports. In this chapter we'll start
            from the simplest tools and then show you more advanced possibilities.</para>
    </section>
    <section xml:id="search_findAnything">
        <title>Find Anything</title>
        <para>The main Dashboard has a search bar called Find Anything, where you can type in
            almost any type of data from a record, including a name, course code, class code, even
            an invoice number, and it will be shown in the search results.</para>
        <mediaobject>
            <imageobject>
                <imagedata scalefit="1" width="100%" contentdepth="100%"
                    fileref="images/find_anything.png" format="png"/>
            </imageobject>
            <caption>Find Anything will help you find almost anything within onCourse quickly</caption>
        </mediaobject>
        <note>
            <para> IMPORTANT: This is not the same as the Search function in list views.</para>
        </note>
    </section>    
    <section xml:id="search-listView">
        <title>Lists</title>
        <para>Every list view has a search panel across the bottom.<mediaobject>
                <imageobject>
                    <imagedata scalefit="1" width="100%" contentdepth="100%"
                        fileref="images/search/searchBasic.png" format="png"/>
                </imageobject>
            </mediaobject></para>
        <para>Typing into the Search bar will retrieve all records that match your input across
            certain fields. For example, in the Contact list, the text you enter will be found in
            first name, last name and email address fields. <mediaobject>
                <imageobject>
                    <imagedata scalefit="1" width="100%" contentdepth="100%"
                        fileref="images/search/searchFuzzyName.png" format="png"/>
                </imageobject>
                <caption>
                    <para>Searching units of competency</para>
                </caption>
            </mediaobject>
        </para>
    </section>
    <section xml:id="search-findRelated">
        <title>Find related records</title>
        <para>Find related records is one of the most powerful tools inside onCourse, let you
            quickly jump from window to window, finding records related to groups of other records.
            This function is located next to the advanced search in each list view in
            onCourse.</para>
        <para>For example, to locate all the employers of all the students aged 18 to 25 in the last
            three months of VET programs to send the Employer Satisfaction Survey to you can start
            by searching for all classes with a particular tag or use the advanced search on VET
            course flag. Once you have those classes, you can highlight those delivered in the last
            three months, and select from the find related icon 'Enrolled students'. </para>
        <mediaobject>
            <imageobject>
                <imagedata scalefit="1" width="100%" contentdepth="100%"
                    fileref="images/find_related_records.png" format="png"/>
            </imageobject>
            <caption>
                <para>Finding current classes scheduled for the highlighted room using the Find
                    related tool</para>
            </caption>
        </mediaobject>
        <para>Once the student list has opened, you can search that list of results for students
            aged 18 to 25. The list view that has opened is in a special mode called 'custom
            selection' which you can see in the window header bar. This means other searches or
            filters you run on this window are only inside the special set of results you have
            created as a list.</para>
        <para>With the reduced list of students, you can use the find related icon to select
            contacts related as Employer. From this new window, you can use the cog wheel to send a
            message to the student's employers.</para>
        <note>
            <para>Find related can only be run on a max of 1000 records</para>
        </note>
        <mediaobject>
            <imageobject>
                <imagedata scalefit="1" width="70%" contentdepth="70%"
                    fileref="images/find_related_records_search.png" format="png"/>
            </imageobject>
            <caption>
                <para>Finding the enrolments related to the selected units of competency</para>
            </caption>
        </mediaobject>
    </section>
    <section xml:id="search-advanced">
        <title>Advanced search query language</title>
        <para>You can construct more powerful Advanced Search queries using the onCourse query
            language. You can toggle between Basic and Advanced Search by clicking the magnifying
            glass icon on the left of the search panel. When you are in advanced mode, a plus symbol
            appears next to the icon. It might seem intimidating at first, but understanding the
            logic of this feature will help hone in on finding exactly the right data you need.<mediaobject>
                <imageobject>
                    <imagedata scalefit="1" width="100%" contentdepth="100%"
                        fileref="images/search/searchAdvanced.png" format="png"/>
                </imageobject>
                <caption>
                    <para>The advanced search query bar</para>
                </caption>
            </mediaobject>
        </para>
        <para>A simple query consists of a field, followed by an operator, followed by a
            value:</para>
        <programlisting> 
                title starts with "Apply"             
            </programlisting>
        <para>In the above example, the field is 'title', the operator is 'starts with', and the
            value is 'Apply'. Searches are context sensitive to the screen you are viewing e.g. in
            the Unit of Competency list, this query will show you records beginning with 'Apply'. </para>
        <para>Two or more queries can be linked together with conditional operators.</para>
        <programlisting> 
                title starts with 'Apply' and nationalCode starts with "B"                  
            </programlisting>
        <para>In this example, 'and' is the conditional operator that combines the two separate
            queries. In this case, using 'and' means only records that satisfy both queries are
            returned.</para>
        <mediaobject>
            <imageobject>
                <imagedata scalefit="1" width="100%" contentdepth="100%"
                    fileref="images/search/searchOperator.png" format="png"/>
            </imageobject>
            <caption>
                <para>An example of a simple query using the onCourse query language</para>
            </caption>
        </mediaobject>
        <section xml:id="search-advanced-fields">
            <title>Fields</title>
            <para>When you click into the Advanced Search box, a drop-down list of available
                    <emphasis>fields</emphasis> will appear. The fields that are available to use in
                queries will change depending on which record type you are searching on. </para>
            <mediaobject>
                <imageobject>
                    <imagedata scalefit="1" width="100%" contentdepth="100%"
                        fileref="images/search/advanced_query_fields.png" format="png"/>
                </imageobject>
                <caption>
                    <para>Query parameters are listed in a simple, context-sensitive drop-down box
                        for you to choose from</para>
                </caption>
            </mediaobject>
        </section>
        <section xml:id="search-advanced-operators">
            <title>Operators</title>
            <para>In your query, you will want to compare the field with some value. The type of
                comparison is defined with an <emphasis>operator</emphasis>. Each operator can be
                written as a word in full or as the short symbol.</para>
            <para>
                <variablelist>
                    <varlistentry>
                        <term>EQUALS or = </term>
                        <listitem>
                            <para>Finds records where the field matches the value exactly. This
                                operator is not case sensitive.</para>
                            <para>
                                <programlisting>createdOn = today</programlisting>
                                <programlisting>nationalCode EQUALS "ABC"         </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>NOT EQUAL or !=</term>
                        <listitem>
                            <para>NOT EQUAL finds records that do not match the input value. </para>
                            <para>
                                <programlisting>deliveryMode != ONLINE                                    </programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>LESS THAN or &lt;</term>
                        <listitem>
                            <para>LESS THAN returns records where the value is less than the input
                                value.</para>
                            <para>LESS THAN can also be used with EQUALS to return records where the
                                value is less than or equal to the input value.</para>
                            <para>
                                <programlisting>enrolmentCount &lt; 10                                   </programlisting>
                                <programlisting>enrolmentCount &lt;= 9</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>GREATER THAN or &gt;</term>
                        <listitem>
                            <para>GREATER THAN returns records where the value is greater than the
                                input value.</para>
                            <para>GREATER THAN can be used with EQUALS to return records where the
                                value is greater than or equal to the input value.</para>
                            <para>
                                <programlisting>age &gt; 17</programlisting>
                                <programlisting>age &gt;= 18</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>BETWEEN or ..</term>
                        <listitem>
                            <para>BETWEEN ( .. ) is used to specify a date range. BETWEEN ( .. )
                                will return records where the specified attribute occurred or was
                                created between the set dates.</para>
                            <para>
                                <programlisting>createdOn 01/01/2018 .. 01/02/2018</programlisting>
                            </para>
                            <para>BETWEEN can be used with a star closure ( * ), placed either
                                directly before or after the date. See below for the correct syntax;
                                placing the star and BETWEEN before the date will find all relevant
                                data from before that date, while placing them after will find all
                                relevant data after that date.</para>
                            <programlisting>createdOn *..01/01/2018</programlisting>
                            <para>The above query will find any data that was create before the 1st
                                January 2018, while the below query finds anything created after 1st
                                January 2018.</para>
                            <programlisting>createdOn 01/01/2018..*</programlisting>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>IN</term>
                        <listitem>
                            <para>IN will display any data that fits into the input data set.</para>
                            <para>A set is denoted as a list of items, where each element of the set
                                is separated by a comma. In the below example, this query will
                                return and display any data that has a confirmationStatus as either
                                    <emphasis>NOT_SENT</emphasis> or
                                    <emphasis>DO_NOT_SEND</emphasis>.</para>
                            <para>
                                <programlisting>confirmationStatus in NOT_SENT, DO_NOT_SEND

enrolment.student.id in (10,11,12)</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>[ ]</term>
                        <listitem>
                            <para>Similar to IN is a shorthand to search against the record id (the
                                primary key in the database).</para>
                            <para>Square brackets denote this shortcut.</para>
                            <para>
                                <programlisting>enrolment.student[10,11,12]</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>BEFORE</term>
                        <listitem>
                            <para>BEFORE can be used in conjunction with dates (or date-specific
                                keywords, like 'today' or 'tomorrow') to return any requested data
                                created or set before the input date.</para>
                            <para>
                                <programlisting>createdOn before today</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>AFTER: after</term>
                        <listitem>
                            <para>AFTER can be used in conjunction with dates (or date-specific
                                keywords, like 'today' or 'tomorrow') to return any requested data
                                created or set after the input date.</para>
                            <para>
                                <programlisting>createdOn after today</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
            <para>
                <variablelist>
                    <varlistentry>
                        <term>CONTAINS</term>
                        <listitem>
                            <para> CONTAINS returns any data where the specified field
                                contains/matches the input.</para>
                            <para>
                                <programlisting>name contains "Gardening"</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>STARTS WITH:</term>
                        <listitem>
                            <para>STARTS WITH returns any data where the specified field contains
                                data that starts with the input.</para>
                            <para>
                                <programlisting>name starts with "Cooking"</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>ENDS WITH: ends with</term>
                        <listitem>
                            <para> ENDS WITH returns any data where the specified field contains
                                data that ends with the input.</para>
                            <para>
                                <programlisting>name ends with "Expert"</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>NOT</term>
                        <listitem>
                            <para>NOT reverses the returned value of all of the previous
                                operators.</para>
                            <para>For example, 'code not contains "Gardening"' with return all
                                courses that have a code that does not contain the term 'Gardening' </para>
                            <para>
                                <programlisting>name not like John</programlisting>
                                <programlisting>name not contains "Gardening"</programlisting>
                                <programlisting>name not starts with "Cooking"</programlisting>
                                <programlisting>name not ends with "Beginners"</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>HAS TAG or # </term>
                        <listitem>
                            <para>The HAS TAG ( # ) operator will return records that are tagged
                                with the specified tag in onCourse E.G. if you have a tag named
                                Health and Care, and another named Training, and you wanted to find
                                records that use either tag, you'd use:</para>
                            <para>
                                <programlisting>#Health_and_Care or #Training</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term> FILTER TAG or @ </term>
                        <listitem>
                            <para>The FILTER TAG ( @ ) operator is used to as shorthand to call a
                                custom query or other filter that has been saved. </para>
                            <para>For example, imagine the following query is saved with the name
                                    <emphasis>kids</emphasis>:
                                <programlisting>Age &lt;= 12</programlisting></para>
                            <para>
                                <emphasis>@kids</emphasis> can then be called in the construction of
                                other queries
                                <programlisting>@kids and isMale is true</programlisting> is
                                equivalent to Age &lt;= 12 and isMale is true </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term> LIKE or ~ </term>
                        <listitem>
                            <para>The LIKE (~) operator is used to search a field for a specific
                                pattern.</para>
                            <para>There are two special wild card characters used with the LIKE
                                operator: <orderedlist>
                                    <listitem>
                                        <para><emphasis>%</emphasis>: the percent sign is used to
                                            represent any amount of characters (including
                                            zero)</para>
                                    </listitem>
                                    <listitem>
                                        <para><emphasis>_</emphasis>: the underscore is used to
                                            represent exactly one character</para>
                                    </listitem>
                                </orderedlist></para>
                            <para>Examples of the LIKE operator with wild card characters:</para>
                            <para>
                                <programlisting>name ~ "a%"
name like "a%"</programlisting></para>
                            <para>finds any record that has a name starting with "a"</para>
                                <programlisting>name ~ "%a"</programlisting>
                            <para>finds any record that has a name ending with "a"</para>
                                <programlisting>name ~ "%ab%"</programlisting>
                            <para>finds any record that has a name containing "ab"</para>
                                <programlisting>name ~ "_a%"</programlisting>
                            <para>finds any record that has a name with "a" as the second letter</para>
                                <programlisting>name ~ "_%_%_%"</programlisting>
                            <para>finds any record that has a name with at least a length of 3 characters</para>
                                <programlisting>name ~ "a%b"</programlisting>
                            <para>finds any record that has a name starting with "a" and ending with
                                "b".</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
        </section>
        <section xml:id="search-advanced-conditions">
            <title>Combining queries</title>
            <para>
                <variablelist>
                    <varlistentry>
                        <term>OR</term>
                        <listitem>
                            <para>
                                <programlisting>name contains "Gardening" or code starts with "GAR"</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>AND</term>
                        <listitem>
                            <para>
                                <programlisting>startDateTime = tomorrow and successAndQueuedEnrolments >= minimumPlaces</programlisting>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>( )</term>
                        <listitem>
                            <para> Use brackets to specify the order in which query fragments are
                                executed.
                                <programlisting>name contains "Gardening" or (code starts with "GAR" and startDateTime = tomorrow)</programlisting></para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
        </section>
        <section xml:id="search-advanced-keywords">
            <title>Keywords</title>
            <para>In onCourse, a keyword is a reserved word that has a predefined meaning.</para>
            <variablelist>
                <varlistentry>
                    <term>DATES</term>
                    <listitem>
                        <para>
                            <variablelist>
                                <varlistentry>
                                    <term>today</term>
                                    <listitem>
                                        <para>the current day from 00:00 to 23:59</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>yesterday</term>
                                    <listitem>
                                        <para>yesterday from 00:00 to 23:59</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>tomorrow</term>
                                    <listitem>
                                        <para>tomorrow from 00:00 to 23:59</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>last year</term>
                                    <listitem>
                                        <para>from January 1 00:00 to December 31 23:59 of the
                                            previous year</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>last month </term>
                                    <listitem>
                                        <para>from the 1st of the previous month 00:00, to the last
                                            day of the previous month 23:59 </para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>last week</term>
                                    <listitem>
                                        <para>from Monday 00:00 to Sunday 23:59 of the previous
                                            week.</para>
                                        <para>If 'today' is Thursday 13 September 2018, then 'last
                                            week' will be from Monday 3 September 2018 to 9
                                            September 2018.</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>next year</term>
                                    <listitem>
                                        <para>from January 1 00:00 to December 31 23:59 of the next
                                            year</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>next month</term>
                                    <listitem>
                                        <para>from the 1st of the next month 00:00 , to the last day
                                            of the next month 23:59</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term>next week</term>
                                    <listitem>
                                        <para>from Monday 00:00 to Sunday 23:59 of the next
                                            week.</para>
                                        <para>If 'today' is Thursday 13 September 2018, then 'next
                                            week' will be from Monday 17 September 2018 to 24
                                            September 2018.</para>
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                        </para>
                        <para>
                            <programlisting>createdOn today
createdOn yesterday .. tomorrow
startDateTime last week
endDateTime next year</programlisting>
                        </para>
                        <para>Dates can be combined with basic arithmetic and a specified time unit
                            to query over a period of time.</para>
                        <para>
                            <programlisting>createdOn today + 1 day
createdOn yesterday..tomorrow + 2 week
createdOn * .. today + 6 month
createdOn 9:00 .. 19:00 today - 1 year</programlisting>
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>ME</term>
                    <listitem>
                        <para>ME allows for search to be constructed using the currently logged in
                            user as a query value.</para>
                        <para>
                            <programlisting>Invoice.createdByUser = me</programlisting>
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section xml:id="search-advanced-arithmetic">
            <title>Arithmetic</title>
            <para>
                Basic arithmetic can be performed directly within the query language. Addition, subtraction, division, multiplication and modulus operations are all supported.
                <programlisting>feeHelpAmount is 100 + 50
feeHelpAmount is 100 - 50
feeHelpAmount is 100 / 2
feeHelpAmount is 100 * 5
feeHelpAmount is 100 % 3</programlisting>
            </para>
        </section>
        <section>
            <title>Special attributes</title>
            <para>Some record types have special attributes which aren't stored in the database, but
                calculated on the fly. Some examples are:</para>
            <para>
                <variablelist>
                    <varlistentry>
                        <term>enrolmentCount</term>
                        <listitem>
                            <para>Search Class records on the current count of active
                                enrolments.<programlisting>enrolmentCount = 3</programlisting></para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>isMinEnrolments</term>
                        <listitem>
                            <para>Search Class records to find those that have reached their minimum
                                or
                                above.<programlisting>isMinEnrolments = true</programlisting></para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>isMaxEnrolments</term>
                        <listitem>
                            <para>Search Class records to find those that have reached their maximum
                                capacity.<programlisting>isMaxEnrolments = false</programlisting></para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </para>
        </section>
    </section>
    <section xml:id="search-script">
        <title>Searching in custom scripts</title>
        <para>Scripts often need retrieve records from your database to perform some function. For
            example, if you wanted to contact all students who are enrolled in a class starting
            tomorrow, you would need to retrieve all classes that start tomorrow from the
            database.</para>
        <para>Add a query panel to your script like this.</para>
        <mediaobject>
            <imageobject>
                <imagedata scalefit="1" width="100%" contentdepth="100%"
                    fileref="images/search/searchScript.png" format="png"/>
            </imageobject>
        </mediaobject>
        <para>The results of this query are then available to you in your script in the variable
            'records'. You can use this to perform additional actions in the script. </para>
        <para>For more information on custom scripts, please visit our <link xlink:href="scripts.html">Scripting chapter</link></para>
    </section>
</chapter>
